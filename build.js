'use strict';

// Simple static builder: converts posts/*.md to posts/*.html using a minimal Markdown converter.
// No external deps; works offline via `node build.js`.

const fs = require('fs');
const path = require('path');

const ROOT = __dirname;
const POSTS_DIR = path.join(ROOT, 'posts');
const TEMPLATE_PATH = path.join(ROOT, 'post-template.html');
const DATA_JS = path.join(ROOT, 'data.js');

function ensureDir(p) { if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true }); }

function readTemplate() { return fs.readFileSync(TEMPLATE_PATH, 'utf8'); }

// Minimal Markdown → HTML (headings, bold/italic, links, images, code blocks, paragraphs)
function mdToHtml(md) {
  // escape HTML
  const escape = (s) => s.replace(/[&<>]/g, (c) => ({'&':'&amp;','<':'&lt;','>':'&gt;'}[c]));
  // code blocks ```
  let html = md
    .replace(/```([\s\S]*?)```/g, (_, code) => `<pre><code>${escape(code)}</code></pre>`)
    .replace(/^###\s+(.+)$/gm, '<h3>$1</h3>')
    .replace(/^##\s+(.+)$/gm, '<h2>$1</h2>')
    .replace(/^#\s+(.+)$/gm, '<h1>$1</h1>')
    .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.+?)\*/g, '<em>$1</em>')
    .replace(/!\[(.*?)\]\((.*?)\)/g, '<img alt="$1" src="$2" />')
    .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2">$1</a>');
  // paragraphs
  html = html.split(/\n{2,}/).map(block => {
    if (/^<h\d|^<pre|^<ul|^<ol|^<img|^<blockquote/.test(block.trim())) return block;
    return `<p>${block.replace(/\n/g, '<br/>')}</p>`;
  }).join('\n');
  return html;
}

function parseFrontmatter(md) {
  // Frontmatter format:
  // ---\nkey: value\nkey: value\n---\ncontent
  if (!md.startsWith('---')) return { meta: {}, content: md };
  const end = md.indexOf('\n---');
  if (end === -1) return { meta: {}, content: md };
  const fm = md.slice(3, end).trim();
  const content = md.slice(end + 4).replace(/^\n/, '');
  const meta = {};
  fm.split(/\n/).forEach(line => {
    const m = line.match(/^(\w+):\s*(.*)$/);
    if (m) meta[m[1]] = m[2];
  });
  return { meta, content };
}

function prettyDate(iso) {
  try { return new Intl.DateTimeFormat(undefined, { dateStyle: 'long' }).format(new Date(iso)); } catch { return iso; }
}

function build() {
  ensureDir(POSTS_DIR);
  const template = readTemplate();
  const files = fs.readdirSync(POSTS_DIR).filter(f => f.endsWith('.md'));

  const posts = [];

  for (const file of files) {
    const slug = file.replace(/\.md$/, '');
    const raw = fs.readFileSync(path.join(POSTS_DIR, file), 'utf8');
    const { meta, content } = parseFrontmatter(raw);

    const title = meta.title || slug;
    const date = meta.date || new Date().toISOString().slice(0,10);
    const readMins = Number(meta.readMins || 5);
    const tags = (meta.tags || '').split(',').map(s => s.trim()).filter(Boolean);
    const excerpt = meta.excerpt || (content.split(/\n/).find(l => l.trim()).slice(0, 160) + '…');
    const image = meta.image || `../images/posts/${slug}.jpg`;
    const author = meta.author || 'Author';
    const avatar = meta.avatar || '../images/avatar.jpg';

    const htmlContent = mdToHtml(content.trim());
    const page = template
      .replace(/{{title}}/g, escapeHtml(title))
      .replace(/{{excerpt}}/g, escapeHtml(excerpt))
      .replace(/{{image}}/g, image)
      .replace(/{{author}}/g, escapeHtml(author))
      .replace(/{{avatar}}/g, avatar)
      .replace(/{{dateISO}}/g, date)
      .replace(/{{datePretty}}/g, escapeHtml(prettyDate(date)))
      .replace(/{{readMins}}/g, String(readMins))
      .replace(/{{content}}/g, htmlContent);

    const outPath = path.join(POSTS_DIR, `${slug}.html`);
    fs.writeFileSync(outPath, page, 'utf8');

    posts.push({ id: slug, title, date, readMins, tags, image: `./images/posts/${slug}.jpg`, excerpt, content: `<div>${htmlContent}</div>` });
  }

  // Merge into data.js: we will append/overwrite exported POSTS with built posts if exists
  // To avoid clobbering, write a separate file data.generated.js
  const generatedPath = path.join(ROOT, 'data.generated.js');
  const js = `// Generated by build.js\nwindow.POSTS = ${JSON.stringify(posts, null, 2)};\nwindow.CATEGORIES = Array.from(new Set(POSTS.flatMap(p=>p.tags||[]))).map(t=>({id:t,name:t}));\nwindow.POPULAR = POSTS.slice(0,6).map(p=>({id:p.id,likes:Math.floor(50+Math.random()*120)}));\n`;
  fs.writeFileSync(generatedPath, js, 'utf8');
  console.log(`Built ${posts.length} post page(s). Wrote posts/*.html and data.generated.js`);
}

function escapeHtml(s){ return String(s).replace(/[&<>]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;'}[c])); }

if (require.main === module) build();


